#+title: Stuff

* How to go about it: stuff I can use
Some info is gleaned from looking at https://everyonedraw.com
** Use websockets to send and receive individual pixels
** Send rendered tiles as pngs via GET request
** everyone draw deals with initial render + new pixels separately, because new pixels are rare
But new pixels are pretty common for us. Likely we want to compute client-side
The client can compute everything loaded _except_ for the outermost 1-cell thick layer, which can be sent by the server.
** Use something to render it
- everyonedraw uses canvas
- tables
** Use database to store stuff, or store in ram
*** If data can't fit in memory, then how do we update it?
Chunking to update + load what we need (index) when someone wants it
* Architecture
Connections incoming for websockets get stored.
Every five seconds, the server world gets stepped, and then each open socket gets sent a portion of the current world state. -- use tokio broadcast
Whenever the viewport gets changed, a message gets sent from the client to the server
Also, whenever a tile is placed, a message goes c->s as well
